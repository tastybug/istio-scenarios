apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: backend-gateway
spec:
  selector:
    istio: ingressgateway
  servers:
  - port:
      number: 80
      name: http
      protocol: HTTP
    hosts:
    - "stuff.istiodemo.io"
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: backend-vs
spec:
  hosts:
  - "stuff.istiodemo.io"
  gateways:
  - backend-gateway
  http:
  - route:
    - destination:
        # points to svc
        host: all-backend-svc
        port:
          # this points to the service
          number: 8000
--- 
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: my-load-balancer-dr
spec:
  host: all-backend-svc
  trafficPolicy:
    loadBalancer:
      simple: RANDOM
  subsets:
  - name: v1
    labels:
      version: v1
  - name: v2
    labels:
      version: v2
    # in v2, do round robin
    trafficPolicy:
      loadBalancer:
        simple: ROUND_ROBIN
  - name: v3
    labels:
      version: v3
---
apiVersion: v1
kind: Service
metadata:
  name: all-backend-svc
  labels:
    app: backend
spec:
  ports:
  - name: http
    port: 8000
    protocol: TCP
    targetPort: 8080
  selector:
    app: backend
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-v1
  labels:
    app: backend  
    version: v1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend
      version: v1
  template:
    metadata:
      labels:
        app: backend
        version: v1
    spec:
      serviceAccountName: backend
      containers:
      - env:
        - name: "LISTEN_ADDR"
          value: "0.0.0.0:8080"
        - name: "SERVER_TYPE"
          value: "http"                      
        - name: "NAME"
          value: "backend"      
        - name: "MESSAGE"
          value: "hello from v1"                   
        - name: KUBERNETES_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        image: nicholasjackson/fake-service:v0.17.0
        name: backend
        ports:
        - containerPort: 8080
          name: http-port
          protocol: TCP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-v2
  labels:
    app: backend
    version: v2
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend
      version: v2
  template:
    metadata:
      labels:
        app: backend
        version: v2
    spec:
      serviceAccountName: backend
      containers:
      - env:
        - name: "LISTEN_ADDR"
          value: "0.0.0.0:8080"
        - name: "SERVER_TYPE"
          value: "http"                      
        - name: "NAME"
          value: "backend"      
        - name: "MESSAGE"
          value: "hello from v2"             
        - name: KUBERNETES_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        image: nicholasjackson/fake-service:v0.17.0
        name: backend
        ports:
        - containerPort: 8080
          name: http-port
          protocol: TCP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-v3
  labels:
    app: backend
    version: v3
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend
      version: v3
  template:
    metadata:
      labels:
        app: backend
        version: v3
    spec:
      serviceAccountName: backend
      containers:
      - env:
        - name: "LISTEN_ADDR"
          value: "0.0.0.0:8080"
        - name: "SERVER_TYPE"
          value: "http"                      
        - name: "NAME"
          value: "backend"      
        - name: "MESSAGE"
          value: "hello from v3"             
        - name: KUBERNETES_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        image: nicholasjackson/fake-service:v0.17.0
        name: backend
        ports:
        - containerPort: 8080
          name: http-port
          protocol: TCP
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: backend